================================================================================
ERFOLGREICHES AZURE SETUP - ZEITERFASSUNG APP
================================================================================

DATUM: 05.08.2025
VERSION: 1.0
STATUS: ✅ ERFOLGREICH DEPLOYED UND FUNKTIONIERT

URL: https://zeiterfassung-app.azurewebsites.net

================================================================================
1. ERFOLGREICHE KONFIGURATION
================================================================================

1.1 HAUPTDATEIEN (MÜSSEN SO SEIN):

app_azure.py:
```python
from flask import Flask, request, jsonify, session, send_from_directory
from flask_cors import CORS
from datetime import datetime
import os

app = Flask(__name__)
app.secret_key = 'zeiterfassung-secret-key-2025'
CORS(app, supports_credentials=True)

# Mock-Daten (KEINE Datenbank-Abhängigkeit!)
MOCK_USERS = [
    {'id': 1, 'email': 'monteur', 'password': 'monteur', 'name': 'Monteur', 'role': 'monteur'},
    {'id': 2, 'email': 'buero', 'password': 'buero', 'name': 'Büro', 'role': 'buero'}
]

# Route-Reihenfolge WICHTIG:
@app.route('/static/<path:filename>')
def serve_static_files(filename):
    return send_from_directory('build/static', filename)

@app.route('/')
def serve_frontend():
    return send_from_directory('build', 'index.html')

@app.route('/<path:path>')
def serve_react_routes(path):
    return send_from_directory('build', 'index.html')
```

1.2 AZURE-KONFIGURATION:

startup.sh:
```bash
#!/bin/bash
gunicorn --bind=0.0.0.0 --timeout 600 app_azure:app
```

web.config:
```xml
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <handlers>
      <add name="PythonHandler" path="*" verb="*" modules="FastCgiModule" scriptProcessor="D:\\Python39\\python.exe|D:\\Python39\\Lib\\site-packages\\wfastcgi.py" resourceType="Unspecified" requireAccess="Script" />
    </handlers>
    <rewrite>
      <rules>
        <rule name="React Routes" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="/" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>
```

runtime.txt:
```
python-3.9
```

Procfile:
```
web: gunicorn app:app --bind 0.0.0.0:$PORT --workers 4 --timeout 120
```

requirements.txt:
```
Flask==2.3.3
Flask-CORS==4.0.0
python-dotenv==1.0.0
Werkzeug==2.3.7
gunicorn==21.2.0
```

1.3 AZURE STARTUP-COMMAND:
```bash
gunicorn --bind=0.0.0.0 --timeout 600 app_azure:app
```

================================================================================
2. WAS MAN MACHEN MUSS (DO'S)
================================================================================

2.1 BACKEND-SETUP:
✅ Mock-Daten verwenden (keine Datenbank-Abhängigkeit)
✅ Einfache Flask-App ohne komplexe Dependencies
✅ Route-Reihenfolge: Statische Dateien VOR Hauptroute
✅ app_azure.py als Hauptanwendung
✅ Gunicorn mit Timeout-Parameter
✅ CORS für Frontend-Integration

2.2 FRONTEND-SETUP:
✅ React-App in /build/ Ordner
✅ Statische Dateien in /build/static/
✅ index.html im /build/ Ordner
✅ Alle Assets (CSS, JS, Bilder) verfügbar

2.3 AZURE-KONFIGURATION:
✅ Startup-Command korrekt setzen
✅ Python 3.9 Runtime
✅ Gunicorn als WSGI Server
✅ Timeout-Parameter (600 Sekunden)
✅ Port-Binding auf 0.0.0.0

2.4 DEPLOYMENT:
✅ ZIP-Datei ohne __pycache__ erstellen
✅ Alle Dateien in Backend-Ordner
✅ Azure CLI Login vorher
✅ Deployment mit az webapp deploy

================================================================================
3. WAS MAN NICHT MACHEN DARF (DON'TS)
================================================================================

3.1 ❌ DATENBANK-ABHÄNGIGKEITEN:
❌ pyodbc verwenden (ODBC-Treiber fehlen)
❌ SQLite-Dateien deployen
❌ Komplexe Datenbank-Migrations
❌ Externe Datenbank-Verbindungen

3.2 ❌ KOMPLEXE DEPENDENCIES:
❌ Viele externe Libraries
❌ Native Dependencies
❌ System-spezifische Pakete
❌ Komplexe Environment Variables

3.3 ❌ FALSCHER STARTUP-COMMAND:
❌ app_complete:app (existiert nicht)
❌ app.py:app (falsche Datei)
❌ Ohne Timeout-Parameter
❌ Falsche Port-Binding

3.4 ❌ FALSCHER ROUTE-AUFBAU:
❌ Hauptroute vor statischen Routen
❌ Fehlende statische Routen
❌ Falsche Verzeichnis-Pfade
❌ Keine Catch-All Route

3.5 ❌ FRONTEND-PROBLEME:
❌ Frontend nicht gebaut
❌ Statische Dateien fehlen
❌ Falsche Pfade in index.html
❌ CORS-Probleme

3.6 ❌ AZURE-KONFIGURATION:
❌ Falsche Python-Version
❌ Ohne Gunicorn
❌ Falsche Port-Konfiguration
❌ Fehlende Timeout-Parameter

================================================================================
4. ERFOLGREICHES DEPLOYMENT-SCRIPT
================================================================================

4.1 BACKUP VERWENDEN:
```bash
# Backup der funktionierenden Version verwenden
cd backup_20250805_135000/backend
```

4.2 ZIP ERSTELLEN:
```bash
zip -r ../../zeiterfassung-deployment.zip . -x "__pycache__/*" "*.db" "venv/*"
```

4.3 AZURE DEPLOYMENT:
```bash
az webapp deploy --resource-group zeiterfassung-rg --name zeiterfassung-app --src-path zeiterfassung-deployment.zip
```

4.4 STARTUP-COMMAND SETZEN:
```bash
az webapp config set --resource-group zeiterfassung-rg --name zeiterfassung-app --startup-file "gunicorn --bind=0.0.0.0 --timeout 600 app_azure:app"
```

4.5 TESTEN:
```bash
# Health Check
curl https://zeiterfassung-app.azurewebsites.net/health

# Frontend testen
curl https://zeiterfassung-app.azurewebsites.net/

# Statische Dateien testen
curl -I https://zeiterfassung-app.azurewebsites.net/static/js/main.4abd6ebc.js
```

================================================================================
5. TROUBLESHOOTING
================================================================================

5.1 APP STARTET NICHT:
- Startup-Command prüfen: app_azure:app
- Logs prüfen: az webapp log tail
- Requirements.txt prüfen (keine pyodbc)
- Port-Konfiguration prüfen

5.2 WEISSE SEITE:
- Route-Reihenfolge prüfen
- Statische Dateien verfügbar?
- Frontend-Build vorhanden?
- CORS-Konfiguration korrekt?

5.3 STATISCHE DATEIEN FEHLEN:
- /build/ Ordner vorhanden?
- Route-Reihenfolge korrekt?
- send_from_directory verwendet?
- Pfade korrekt?

5.4 DEPLOYMENT FEHLT:
- ZIP-Datei korrekt erstellt?
- Azure CLI Login?
- Resource Group existiert?
- App Service existiert?

================================================================================
6. ERFOLGSFAKTOREN
================================================================================

✅ EINFACHHEIT:
- Mock-Daten statt Datenbank
- Minimale Dependencies
- Einfache Flask-App

✅ KORREKTE KONFIGURATION:
- app_azure:app Startup-Command
- Route-Reihenfolge korrekt
- Gunicorn mit Timeout

✅ VOLLSTÄNDIGES DEPLOYMENT:
- Frontend-Build enthalten
- Alle statischen Dateien
- Azure-spezifische Konfiguration

✅ TESTING:
- Health Check funktioniert
- Frontend lädt korrekt
- Statische Dateien verfügbar

================================================================================
7. TEST-ACCOUNTS
================================================================================

Monteur:
- Email: monteur
- Password: monteur

Büro:
- Email: buero
- Password: buero

================================================================================
8. MONITORING
================================================================================

8.1 AZURE LOGS:
```bash
az webapp log tail --resource-group zeiterfassung-rg --name zeiterfassung-app
```

8.2 HEALTH CHECK:
```bash
curl https://zeiterfassung-app.azurewebsites.net/health
```

8.3 APP STATUS:
```bash
az webapp show --resource-group zeiterfassung-rg --name zeiterfassung-app
```

================================================================================
9. WIEDERHERSTELLUNG
================================================================================

Bei Problemen immer das Backup verwenden:
```bash
# Backup verwenden
cp -r backup_20250805_135000/backend/* backend/

# Neues Deployment
cd backend
zip -r ../zeiterfassung-restore.zip . -x "__pycache__/*" "*.db" "venv/*"
az webapp deploy --resource-group zeiterfassung-rg --name zeiterfassung-app --src-path ../zeiterfassung-restore.zip
```

================================================================================
10. ZUSAMMENFASSUNG
================================================================================

ERFOLGREICHES SETUP BEDEUTET:
✅ Einfache Mock-Daten-App
✅ Korrekte Azure-Konfiguration
✅ Vollständiges Frontend-Build
✅ Richtige Route-Reihenfolge
✅ Gunicorn mit Timeout

VERMEIDEN:
❌ Komplexe Dependencies
❌ Datenbank-Abhängigkeiten
❌ Falsche Startup-Commands
❌ Fehlende statische Dateien
❌ Falsche Route-Reihenfolge

================================================================================
ENDE DER DOKUMENTATION
================================================================================ 