from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, send_from_directory
from flask_cors import CORS
from functools import wraps
import os
import logging
import sqlite3
import csv
import uuid
from datetime import datetime, timedelta
import json

logging.basicConfig(level=logging.DEBUG)

print("ðŸš€ Refactored Online App wird gestartet...")

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'default_secret_key')

# Azure-kompatible Session-Konfiguration
os.makedirs('/tmp/sessions', exist_ok=True)

# CORS fÃ¼r Frontend-Kommunikation - erweitert fÃ¼r Azure
CORS(app, 
     supports_credentials=True, 
     origins=[
         'http://localhost:3000',
         'https://localhost:3000', 
         'http://192.168.50.99:3000',
         'http://localhost:3001',
         'https://localhost:3001',
         'http://192.168.50.99:3001',
         'https://la-zeiterfassung-fyd4cge3d9e3cac4.azurewebsites.net',
         'http://la-zeiterfassung-fyd4cge3d9e3cac4.azurewebsites.net',
         '*'
     ],
     allow_headers=['Content-Type', 'Authorization'],
     methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])

# Test-User (in Produktion: Datenbank)
TEST_USERS = {
    'monteur@test.com': {
        'password': 'test123',
        'name': 'Monteur Test',
        'role': 'Monteur'
    },
    'admin@test.com': {
        'password': 'test123',
        'name': 'Admin Test',
        'role': 'Admin'
    }
}

# Datenbank-Funktionen
def get_db_connection():
    conn = sqlite3.connect('zeiterfassung.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # AuftrÃ¤ge Tabelle
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS auftraege (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            art TEXT NOT NULL,
            uhrzeit TEXT NOT NULL,
            standort TEXT NOT NULL,
            coords TEXT,
            details TEXT,
            done BOOLEAN DEFAULT FALSE,
            priority TEXT DEFAULT 'normal',
            mitarbeiter TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Zeiterfassung Tabelle
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS zeiterfassung (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            elevator_id TEXT,
            location TEXT,
            date TEXT NOT NULL,
            activity_type TEXT NOT NULL,
            start_time TEXT NOT NULL,
            end_time TEXT,
            emergency_week BOOLEAN DEFAULT FALSE,
            notes TEXT,
            status TEXT DEFAULT 'pending',
            mitarbeiter TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Arbeitszeit Tabelle
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS arbeitszeit (
            id TEXT PRIMARY KEY,
            datum TEXT NOT NULL,
            start TEXT NOT NULL,
            ende TEXT,
            pause TEXT DEFAULT '00:00',
            gesamt TEXT,
            mitarbeiter TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Urlaub Tabelle
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS urlaub (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mitarbeiter TEXT NOT NULL,
            start_datum TEXT NOT NULL,
            end_datum TEXT NOT NULL,
            tage INTEGER,
            typ TEXT DEFAULT 'Urlaub',
            status TEXT DEFAULT 'pending',
            bemerkung TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# Generic CRUD Service
class GenericCrudService:
    def __init__(self, table_name: str):
        self.table_name = table_name
    
    def get_all(self, filters=None):
        conn = get_db_connection()
        query = f'SELECT * FROM {self.table_name}'
        params = []
        
        if filters:
            conditions = []
            for key, value in filters.items():
                if value != 'all':
                    if key == 'status' and value == 'done':
                        conditions.append('done = 1')
                    elif key == 'status' and value == 'pending':
                        conditions.append('done = 0')
                    else:
                        conditions.append(f'{key} = ?')
                        params.append(value)
            
            if conditions:
                query += ' WHERE ' + ' AND '.join(conditions)
        
        query += ' ORDER BY created_at DESC'
        cursor = conn.execute(query, params)
        rows = cursor.fetchall()
        
        result = []
        for row in rows:
            item = dict(row)
            if 'done' in item:
                item['done'] = bool(item['done'])
            if 'emergency_week' in item:
                item['emergency_week'] = bool(item['emergency_week'])
            result.append(item)
        
        conn.close()
        return result
    
    def create(self, data):
        conn = get_db_connection()
        
        # FÃ¼ge Benutzer hinzu
        if 'mitarbeiter' not in data and 'user' in session:
            data['mitarbeiter'] = session['user'].get('email')
        
        data = {k: v for k, v in data.items() if v is not None}
        
        columns = ', '.join(data.keys())
        placeholders = ', '.join(['?' for _ in data])
        values = list(data.values())
        
        query = f'INSERT INTO {self.table_name} ({columns}) VALUES ({placeholders})'
        cursor = conn.execute(query, values)
        conn.commit()
        
        new_id = cursor.lastrowid
        conn.close()
        
        return {'success': True, 'id': new_id}
    
    def update(self, item_id, data):
        conn = get_db_connection()
        
        data = {k: v for k, v in data.items() if v is not None}
        
        if not data:
            conn.close()
            return {'error': 'Keine Daten zum Aktualisieren'}
        
        set_clause = ', '.join([f'{k} = ?' for k in data.keys()])
        values = list(data.values()) + [item_id]
        
        query = f'UPDATE {self.table_name} SET {set_clause} WHERE id = ?'
        cursor = conn.execute(query, values)
        conn.commit()
        conn.close()
        
        return {'success': True}
    
    def delete(self, item_id):
        conn = get_db_connection()
        cursor = conn.execute(f'DELETE FROM {self.table_name} WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()
        
        return {'success': True}

# Services
auftraege_service = GenericCrudService('auftraege')
zeiterfassung_service = GenericCrudService('zeiterfassung')
arbeitszeit_service = GenericCrudService('arbeitszeit')
urlaub_service = GenericCrudService('urlaub')

# Auth Decorator
def requires_role(role):
    def decorator(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            if 'user' not in session:
                return jsonify({'error': 'Nicht angemeldet'}), 401
            
            user_role = session['user'].get('role')
            if user_role != role and user_role != 'Admin':
                return jsonify({'error': 'Keine Berechtigung'}), 403
            
            return f(*args, **kwargs)
        return decorated
    return decorator

# API Routes
@app.route('/api/auftraege', methods=['GET', 'POST'])
def api_auftraege():
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'GET':
        filters = {
            'status': request.args.get('status', 'all'),
            'priority': request.args.get('priority', 'all')
        }
        auftraege = auftraege_service.get_all(filters)
        return jsonify(auftraege)
    
    elif request.method == 'POST':
        data = request.get_json()
        result = auftraege_service.create(data)
        return jsonify(result)

@app.route('/api/auftraege/<int:auftrag_id>', methods=['PUT', 'DELETE'])
def api_auftrag_detail(auftrag_id):
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'PUT':
        data = request.get_json()
        result = auftraege_service.update(auftrag_id, data)
        return jsonify(result)
    
    elif request.method == 'DELETE':
        result = auftraege_service.delete(auftrag_id)
        return jsonify(result)

@app.route('/api/arbeitszeit', methods=['GET', 'POST'])
def api_arbeitszeit():
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'GET':
        arbeitszeit = arbeitszeit_service.get_all()
        return jsonify(arbeitszeit)
    
    elif request.method == 'POST':
        data = request.get_json()
        result = arbeitszeit_service.create(data)
        return jsonify(result)

@app.route('/api/arbeitszeit/<string:entry_id>', methods=['PUT', 'DELETE'])
def api_arbeitszeit_detail(entry_id):
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'PUT':
        data = request.get_json()
        result = arbeitszeit_service.update(entry_id, data)
        return jsonify(result)
    
    elif request.method == 'DELETE':
        result = arbeitszeit_service.delete(entry_id)
        return jsonify(result)

@app.route('/api/urlaub', methods=['GET', 'POST'])
def api_urlaub():
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'GET':
        urlaub = urlaub_service.get_all()
        return jsonify(urlaub)
    
    elif request.method == 'POST':
        data = request.get_json()
        result = urlaub_service.create(data)
        return jsonify(result)

@app.route('/api/urlaub/<int:entry_id>', methods=['PUT', 'DELETE'])
def api_urlaub_detail(entry_id):
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    if request.method == 'PUT':
        data = request.get_json()
        result = urlaub_service.update(entry_id, data)
        return jsonify(result)
    
    elif request.method == 'DELETE':
        result = urlaub_service.delete(entry_id)
        return jsonify(result)

@app.route('/api/login', methods=['POST'])
def api_login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    
    if not email or not password:
        return jsonify({'error': 'E-Mail und Passwort erforderlich'}), 400
    
    if email in TEST_USERS and TEST_USERS[email]['password'] == password:
        user_data = TEST_USERS[email]
        session['user'] = {
            'email': email,
            'name': user_data['name'],
            'role': user_data['role']
        }
        
        return jsonify({
            'success': True,
            'user': session['user'],
            'redirect': '/buero' if user_data['role'] == 'Admin' else '/'
        })
    
    return jsonify({'error': 'UngÃ¼ltige Anmeldedaten'}), 401

@app.route('/api/logout', methods=['POST'])
def api_logout():
    session.clear()
    session.modified = True
    return jsonify({'success': True, 'message': 'Erfolgreich abgemeldet'})

@app.route('/api/me', methods=['GET'])
def api_me():
    if 'user' not in session:
        return jsonify({'error': 'Nicht angemeldet'}), 401
    
    return jsonify({
        'user': session['user'],
        'authenticated': True
    })

@app.route('/api/status')
def api_status():
    return jsonify({
        'status': 'online',
        'version': '1.0.0',
        'user': session.get('user', {}),
        'authenticated': 'user' in session
    })

# Legacy Routes (fÃ¼r KompatibilitÃ¤t)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if email in TEST_USERS and TEST_USERS[email]['password'] == password:
            user_data = TEST_USERS[email]
            session['user'] = {
                'email': email,
                'name': user_data['name'],
                'role': user_data['role']
            }
            
            if user_data['role'] == 'Admin':
                return redirect('/buero')
            return redirect('/')
        flash('UngÃ¼ltige Anmeldedaten')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    session.modified = True
    response = redirect('/login')
    response.delete_cookie('session', domain='.azurewebsites.net')
    response.delete_cookie('session', domain='la-zeiterfassung-fyd4cge3d9e3cac4.azurewebsites.net')
    response.delete_cookie('session')
    return response

@app.route('/')
def index():
    if 'user' not in session:
        return redirect('/login')
    if session['user'].get('role') == 'Admin':
        return redirect('/buero')
    
    # Monteur Dashboard
    return render_template('dashboard.html', user=session['user'])

@app.route('/arbeitszeit')
def arbeitszeit():
    if 'user' not in session:
        return redirect('/login')
    
    return render_template('arbeitszeit.html', user=session['user'])

@app.route('/urlaub')
def urlaub():
    if 'user' not in session:
        return redirect('/login')
    
    return render_template('urlaub.html', user=session['user'])

@app.route('/buero')
@requires_role('Admin')
def buero():
    return render_template('buero.html', user=session['user'])

@app.route('/health')
def health():
    return {'status': 'healthy', 'version': '1.0.0'}

# Initialize database
init_db()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000) 